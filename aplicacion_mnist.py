import streamlit as st
from PIL import Image
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
import gzip
import pickle

# Preprocesar la imagen
def preprocess_image(image):
    image = image.convert('L')  # Convertir a escala de grises
    image = image.resize((28, 28))  # Redimensionar la imagen a 28x28
    image_array = img_to_array(image) / 255.0  # Normalizar los valores de p√≠xeles
    image_array = np.expand_dims(image_array, axis=0)  # Expandir dimensiones para la predicci√≥n
    return image_array

# Cargar el modelo entrenado
def load_model():
    filename = "model_trained_classifierSVC.pkl.gz"
    with gzip.open(filename, 'rb') as f:
        model = pickle.load(f)
    return model

# Funci√≥n principal
def main():
     st.set_page_config(page_title="Clasificaci√≥n MNIST", layout="wide")
    st.title("üñºÔ∏è Clasificaci√≥n de im√°genes MNIST")
    st.write("""
    ### Selecci√≥n del Mejor Modelo Mediante B√∫squeda de Hiperpar√°metros en diferentes m√©todos de clasificaci√≥n.

    En este an√°lisis, se implement√≥ un proceso iterativo para encontrar el mejor modelo de clasificaci√≥n utilizando el Clasificador Naive Bayes (GaussianNB)**, √Årboles de decisi√≥n (DecisionTreeClassifier)**, M√°quinas de Soporte Vectorial (SVC)**, entre otros. Para ello, se realiz√≥ una b√∫squeda de hiperpar√°metros mediante la t√©cnica de **Grid Search con validaci√≥n cruzada**, con el objetivo de optimizar la precisi√≥n del modelo y mejorar su capacidad de generalizaci√≥n.

    Una vez identificado el mejor conjunto de hiperpar√°metros para el modelo: \n
    **Datos de test:**  0.9175 \n
    **Datos de train:**  0.9152 \n
    **Mejor hiperpar√°metro:** {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'} \n
    **Mejor precisi√≥n:** 0.907 \n
    **Kernel utilizado:** rbf \n
    El modelo √≥ptimo fue entrenado con la totalidad de los datos de entrenamiento y evaluado sobre el conjunto de prueba. Para medir su desempe√±o, se calcularon m√©tricas clave como la **precisi√≥n (accuracy)**, adem√°s de visualizar su comportamiento mediante una **matriz de confusi√≥n y la curva ROC**.""")

    # Cargar im√°genes
    img1 = Image.open("ACC_SVC.png").resize((300, 300))
    img2 = Image.open("ROC curve SVC.png").resize((300, 300))

    # Mostrar im√°genes en dos columnas
    col1, col2 = st.columns(2)
    with col1:
        st.image(img1, caption="Matriz de confusi√≥n", use_container_width=True)
    with col2:
        st.image(img2, caption="Curva ROC", use_container_width=True)
    
    st.markdown("### Sube una imagen y el modelo la clasificar√° en una de las 10 categor√≠as del dataset MNIST.")
    st.write("""‚¨ÖÔ∏èAhora intenta clasificar tus im√°genes en la barra lateral izquierda.""")
    st.sidebar.header("Carga de Imagen")
    uploaded_file = st.sidebar.file_uploader("Selecciona una imagen (PNG, JPG, JPEG):", type=["jpg", "png", "jpeg"])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        
        col1, col2 = st.columns(2)
        with col1:
            st.image(image, caption="Imagen original", use_container_width=True)
        
        preprocessed_image = preprocess_image(image)
        
        with col2:
            st.image(image.convert('L').resize((28, 28)), caption="Imagen preprocesada", use_container_width=True)
        
        if st.sidebar.button("Clasificar imagen"):
            model = load_model()
            prediction = model.predict(preprocessed_image)
            st.sidebar.success(f"üî¢ La imagen fue clasificada como: '{prediction}'.")

if __name__ == "__main__":
    main()


