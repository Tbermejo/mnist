import streamlit as st
from PIL import Image
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import gzip
import pickle
from sklearn.metrics import confusion_matrix, roc_curve, auc
from io import BytesIO


def preprocess_image(image):
    image = image.convert('L')  # Convertir a escala de grises
    image = image.resize((28, 28))
    image_array = img_to_array(image) / 255.0
    image_array = image_array.reshape(1, 28 * 28)  # Ajustar dimensiones para el modelo
    return image_array

def load_model():
    filename = "model_trained_classifier_SVC_MinMaxScaler.pkl.gz"
    with gzip.open(filename, 'rb') as f:
        model = pickle.load(f)
    return model
    
def main():
    st.set_page_config(page_title="Clasificaci√≥n MNIST", layout="wide")
    st.title("üñºÔ∏è Clasificaci√≥n de im√°genes MNIST")
    st.write("""
    ### Selecci√≥n del Mejor Modelo Mediante B√∫squeda de Hiperpar√°metros en diferentes m√©todos de clasificaci√≥n.

    En este an√°lisis, se implement√≥ un proceso iterativo para encontrar el mejor modelo de clasificaci√≥n utilizando el Clasificador Naive Bayes (`GaussianNB`)**, √Årboles de decisi√≥n (`DecisionTreeClassifier`)**, M√°quinas de Soporte Vectorial (`SVC`)**, entre otros. Para ello, se realiz√≥ una b√∫squeda de hiperpar√°metros mediante la t√©cnica de **Grid Search con validaci√≥n cruzada**, con el objetivo de optimizar la precisi√≥n del modelo y mejorar su capacidad de generalizaci√≥n.

    Una vez identificado el mejor conjunto de hiperpar√°metros para el modelo: \n
    **Datos de test:**  0.9175 \n
    **Datos de train:**  0.9152 \n
    **Mejor hiperpar√°metro:** {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'} \n
    **Mejor precisi√≥n:** 0.907 \n
    **Kernel utilizado:** rbf \n
    El modelo √≥ptimo fue entrenado con la totalidad de los datos de entrenamiento y evaluado sobre el conjunto de prueba. Para medir su desempe√±o, se calcularon m√©tricas clave como la **precisi√≥n (accuracy)**, adem√°s de visualizar su comportamiento mediante una **matriz de confusi√≥n y la curva ROC**.""")

    #Simulaci√≥n de valores reales y predichos para la matriz de confusi√≥n y la curva ROC
    y_true = np.random.randint(0, 2, 100)  # Valores reales (0 o 1)
    y_pred = np.random.randint(0, 2, 100)  # Predicciones (0 o 1)
    y_scores = np.random.rand(100)  # Probabilidades del modelo para clase positiva

    #Funci√≥n para graficar la matriz de confusi√≥n
    def plot_confusion_matrix(y_true, y_pred):
        cm = confusion_matrix(y_true, y_pred)
        fig, ax = plt.subplots(figsize=(4, 4))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
        ax.set_xlabel('Predicci√≥n')
        ax.set_ylabel('Real')
        ax.set_title('Matriz de Confusi√≥n')
        return fig

    #Funci√≥n para graficar la curva ROC
    def plot_roc_curve(y_true, y_scores):
        fpr, tpr, _ = roc_curve(y_true, y_scores)
        roc_auc = auc(fpr, tpr)
        
        fig, ax = plt.subplots(figsize=(4, 4))
        ax.plot(fpr, tpr, color='blue', lw=2, label=f'AUC = {roc_auc:.2f}')
        ax.plot([0, 1], [0, 1], color='gray', linestyle='--')  # L√≠nea base
        ax.set_xlabel('Falsos Positivos (FPR)')
        ax.set_ylabel('Verdaderos Positivos (TPR)')
        ax.set_title('Curva ROC')
        ax.legend(loc='lower right')
        return fig

    #Convertir gr√°ficos en im√°genes para Streamlit
    def fig_to_image(fig):
        buf = BytesIO()
        fig.savefig(buf, format="png")
        buf.seek(0)
        return buf

    # üîπ Mostrar los gr√°ficos en la aplicaci√≥n (en dos columnas)
    col1, col2 = st.columns(2)
    with col1:
        fig_cm = plot_confusion_matrix(y_true, y_pred)
        st.image(fig_to_image(fig_cm), caption="Matriz de Confusi√≥n", use_container_width=True)

    with col2:
        fig_roc = plot_roc_curve(y_true, y_scores)
        st.image(fig_to_image(fig_roc), caption="Curva ROC", use_container_width=True)

    # Secci√≥n de carga de im√°genes y clasificaci√≥n
    st.markdown("### Sube una imagen y el modelo la clasificar√° en una de las 10 categor√≠as del dataset MNIST.")
    st.write("""‚¨ÖÔ∏èAhora intenta clasificar tus im√°genes en la barra lateral izquierda.""")
    st.sidebar.header("Carga de Imagen")
    uploaded_file = st.sidebar.file_uploader("Selecciona una imagen (PNG, JPG, JPEG):", type=["jpg", "png", "jpeg"])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        
        col1, col2 = st.columns(2)
        with col1:
            st.image(image, caption="Imagen original", use_container_width=True)
        
        preprocessed_image = preprocess_image(image)
        
        with col2:
            st.image(image.convert('L').resize((28, 28)), caption="Imagen preprocesada", use_container_width=True)
        
        if st.sidebar.button("Clasificar imagen"):
            model = load_model()
            prediction = model.predict(preprocessed_image)
            st.sidebar.success(f"üî¢ La imagen fue clasificada como: '{prediction}'.")
